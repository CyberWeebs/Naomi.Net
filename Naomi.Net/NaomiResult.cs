// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using sickle;
//
//    var naomiResult = NaomiResult.FromJson(jsonString);

namespace Naomi.Net
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NaomiResult
    {
        [JsonProperty("header")]
        public NaomiResultHeader Header { get; set; }

        [JsonProperty("results")]
        public Result[] Results { get; set; }
    }

    public partial class NaomiResultHeader
    {
        [JsonProperty("user_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UserId { get; set; }

        [JsonProperty("account_type")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AccountType { get; set; }

        [JsonProperty("short_limit")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ShortLimit { get; set; }

        [JsonProperty("long_limit")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LongLimit { get; set; }

        [JsonProperty("long_remaining")]
        public long LongRemaining { get; set; }

        [JsonProperty("short_remaining")]
        public long ShortRemaining { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("results_requested")]
        public long ResultsRequested { get; set; }

        [JsonProperty("index")]
        public Dictionary<string, Index> Index { get; set; }

        [JsonProperty("search_depth")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SearchDepth { get; set; }

        [JsonProperty("minimum_similarity")]
        public double MinimumSimilarity { get; set; }

        [JsonProperty("query_image_display")]
        public string QueryImageDisplay { get; set; }

        [JsonProperty("query_image")]
        public string QueryImage { get; set; }

        [JsonProperty("results_returned")]
        public long ResultsReturned { get; set; }
    }

    public partial class Index
    {
        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("parent_id")]
        public long ParentId { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public long? Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("header")]
        public ResultHeader Header { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("ext_urls", NullValueHandling = NullValueHandling.Ignore)]
        public Uri[] ExtUrls { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("pixiv_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? PixivId { get; set; }

        [JsonProperty("member_name", NullValueHandling = NullValueHandling.Ignore)]
        public string MemberName { get; set; }

        [JsonProperty("member_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? MemberId { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("creator", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Creator { get; set; }

        [JsonProperty("eng_name", NullValueHandling = NullValueHandling.Ignore)]
        public string EngName { get; set; }

        [JsonProperty("jp_name", NullValueHandling = NullValueHandling.Ignore)]
        public string JpName { get; set; }

        [JsonProperty("part", NullValueHandling = NullValueHandling.Ignore)]
        public string Part { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public string Date { get; set; }
    }

    public partial class ResultHeader
    {
        [JsonProperty("similarity")]
        public string Similarity { get; set; }

        [JsonProperty("thumbnail")]
        public Uri Thumbnail { get; set; }

        [JsonProperty("index_id")]
        public long IndexId { get; set; }

        [JsonProperty("index_name")]
        public string IndexName { get; set; }
    }

    public partial class NaomiResult
    {
        public static NaomiResult FromJson(string json) => JsonConvert.DeserializeObject<NaomiResult>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NaomiResult self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
